#include <iostream>
using namespace std;

// ----------------------- Quack interface -------------------------
class QuackBehavior
{
	public:
		virtual void quack() = 0; // Abstract class because of this pure virtual function
};

class Quack : public QuackBehavior
{
	public:
		void quack()
		{
			cout << "Quack" << endl;
		}
};

class MuteQuack : public QuackBehavior
{
	public:
		void quack()
		{
			cout << "<<Silence>>" << endl;
		}
};
// ----------------------- End of Quack interface -------------------------


// ----------------------- Fly interface -------------------------
class FlyBehavior
{
	public:
		virtual void fly() = 0; // Abstract class because of this pure virtual function
};

class FlyWithWings : public FlyBehavior
{
	public:
		void fly()
		{
			cout << "I'm flying!" << endl;
		}
};

class FlyNoWay : public FlyBehavior
{
	public:
		void fly()
		{
			cout << "I can't fly!" << endl;
		}
};

class FlyhRocketPowerwd : public FlyBehavior
{
	public:
		void fly()
		{
			cout << "I'm flying with a rocket!" << endl;
		}
};


// ----------------------- Duck superclass -------------------------
class Duck
{
	public:
		QuackBehavior *quackBehavior;
		FlyBehavior   *flyBehavior;

		virtual void display() = 0; // Make this an abstract class by having a pure virtual function

		void performFly()
		{
			flyBehavior->fly();
		}

		void performQuack()
				{
					quackBehavior->quack();
				}

		void setQuackBehavior(QuackBehavior *qb)
		{
			cout << "Changing quack behavior..." << endl;
			quackBehavior = qb;
		}

		void setFlyBehavior(FlyBehavior *fb)
		{
			cout << "Changing fly behavior..." << endl;
			flyBehavior = fb;
		}

		void swim()
		{
			cout << "All ducks float, even decoys!" << endl;
		}

};


class MallardDuck : public Duck
{
	public:
		MallardDuck()
		{
			quackBehavior = new Quack();
			flyBehavior   = new FlyWithWings();
		}

		void display()
		{
			cout << "I'm a real Mallard duck!" << endl;
		}
};

class ModelDuck : public Duck
{
	public:
		ModelDuck()
		{
			flyBehavior   = new FlyNoWay();
			quackBehavior = new Quack();
		}

		void display()
		{
			cout << "I'm a model duck" << endl;
		}
};
/*
class PaintedDuck : public Duck
{
	public:
		PaintedDuck()
		{
			quackBehavior = new MuteQuack();
			flyBehavior   = new FlyNoWay();
		}

		void display()
		{
			cout << "I'm a painted wooden duck!" << endl;
		}
};
*/

// ----------------------- End of Duck class and subtypes -------------------------

// ----------------------- The main event -------------------------
int main()
{
	Duck *mallard = new MallardDuck();
	mallard->performQuack();
	mallard->performFly();

	Duck *model = new ModelrDuck();
	model.setFlyBehavior(new FlyRocketPowered());
	model->performFly();

	return 0;
}
