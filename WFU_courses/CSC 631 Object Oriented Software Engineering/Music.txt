/**
 *
 * @author Shuowen Wei
 */

import java.io.File;
import java.util.Map;

import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.SourceDataLine;

import javazoom.spi.mpeg.sampled.file.MpegAudioFileReader;

public class Music implements Runnable{

    private File file;
    private boolean running, pause, restart, stop; // loop, mute
    private final int byteChunkSize = 1024;  //number of bytes to read at one time
    long tStart, tEnd, tDelta, currentSongPosition;
	double percentage;
    //private byte[] muteData;
    //static 
    Thread t;
    
    /**
     * Declares default variable values.
     */
    public Music(){
        file = null;
        running = false;
        pause = false;
        restart = false;
        stop = false; 
        //muteData = setMuteData();
    }
    
    
    /**
     * Creates a file object. If the file path exists on the system, the given file is an mp3, and
     * a song is not currently playing in this instance of the program, true is returned.
     * @param filePath Path to the file.
     * @return If the file is loaded or not.
     */ 
    public boolean loadFile(String filePath){ //boolean
    	
    	running = false; 
    	pause = true;
    	stop = true;
    	
        file = new File(filePath);
        
        // System.out.println("file name is "+file.getName());
        
        if(file.exists() && file.getName().toLowerCase().endsWith(".mp3") && !running){
        	 // running = false;
            return true;
        }
        else{
            file = null;
            return false;
        }
        
    }
    
   
    /**
     * Starts playing the audio in a new thread.
     */
    public void play(){
        if(file != null ) { //&& !running){
        	running = true; //running = true; 
        	pause = false;//pause = false;
            try{
                //Thread t = new Thread(this);  //synchronized(t);
                t = new Thread(this);
            	t.start();
            }catch(Exception e){
                System.err.println("Could not start new thread for audio!");
                e.printStackTrace();
            }
        }
    }

    
    /**
     * Pauses the audio at its current place. Calling this method once pauses the audio stream, calling it
     * again unpauses the audio stream.
     */
    public void pause(){
        if(file != null){
            if(pause){
                pause = false;
            }
            else{
                pause = true;
            }
        }
    }
    /**
     * Closes the audio stream. This method takes some time to execute, and as such you should never call
     * .stop() followed immediately by .play(). If you need to restart a song, use .restart().
     */
    public void stop(){
        if(file != null){
        	
        	//System.out.println("1 state of thread is: "+t.getState().toString());
        	//this.t.stop();
        	stop = true;
        	running = false;
        	pause = false; 
        	System.out.println("2 state of thread is: "+t.getState().toString());
        	//wait(10000000);
        	t.stop();
        	System.out.println("3 state of thread is: "+t.getState().toString());
        	
        }
    }

    /**
     * Restarts the current song. Always use this method to restart a song and never .stop() followed
     * by .play(), which is not safe.
     */
    public void restart(){
        restart = true;
        pause = false;
    }
    
    
    /**
     * Retrieves the audio stream information and starts the stream. When the stream ends, this method
     * checks to see if it should loop and start again.
     */
    public void run() {
        try{
            do{
                restart = false;
                AudioInputStream in = AudioSystem.getAudioInputStream(file);
                AudioInputStream din = null;
                AudioFormat baseFormat = in.getFormat();
                AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,
                                                            baseFormat.getSampleRate(),
                                                            16,
                                                            baseFormat.getChannels(),
                                                            baseFormat.getChannels() * 2,
                                                            baseFormat.getSampleRate(),
                                                            false);
                din = AudioSystem.getAudioInputStream(decodedFormat, in);
                stream(decodedFormat, din);
                in.close();
            }while(restart && running);// && !stop); // while((loop || restart) && running);
            running = false;
        }catch(Exception e){
            System.err.println("Problem getting audio stream!");
            e.printStackTrace();
        }
    }
    
    /**
     * Small sections of audio bytes are read off, watching for a call to stop, pause, restart, or mute the audio.
     * @param targetFormat Format the audio will be changed to.
     * @param din The audio stream.
     */
    private void stream(AudioFormat targetFormat, AudioInputStream din){
        try{
        	
            byte[] data = new byte[byteChunkSize];
            SourceDataLine line = getLine(targetFormat);
            if(line != null){
                line.start();
                int nBytesRead = 0;
                AudioFileFormat baseFileFormat = new MpegAudioFileReader().getAudioFileFormat(file);
                Map<?, ?> properties = baseFileFormat.properties();
                currentSongPosition = (Long)properties.get("duration");
                //System.out.println("The duration of the song "+file.getName()+" is "+currentSongPosition/1000000.0+"seconds.");
                
                //System.out.println(" 333 ");
                
                tStart = System.currentTimeMillis();
                
                //System.out.print("playing percentage is ");
                while(nBytesRead != -1 && running && !restart){	
                	nBytesRead = din.read(data, 0, data.length);
                    if(nBytesRead != -1){
                    	
                    	tEnd = System.currentTimeMillis();
                        tDelta = tEnd - tStart;
                        //System.out.println(" percentage is "+tDelta);
   
                        percentage = tDelta * 100000.0 / currentSongPosition;

                        //System.out.print("\r"+String.format("%.02f", percentage)+"%.");
                        //Thread.sleep(10); 
                    	/*
                    	System.out.print(String.format("%.02f", percentage));
                    	Thread.sleep(1);
                    	System.out.print("\b\b\b\b");
                    	System.out.print("%.");
                    	*/
                    	line.write(data, 0, nBytesRead);
                    }              
                    while(pause && running){
                    	/*
                    	if(stop == true){
                    		t.stop();
                    		file = null; 
                    		running = false;
                    		restart = false;
                    	}
                    	*/
                    	// System.out.println("running="+running+" pause = " + pause+" restart="+restart+" stop="+stop);
                    	//System.out.println(" 444 ");
                        //wait(15);
                        Thread.sleep(500);
                    }
                }
                
                //System.out.println(" 555 ");
                line.drain();
                line.stop();
                line.close();
                din.close();
            }
        }catch(Exception e){
            System.err.println("Problem playing audio!");
            e.printStackTrace();
        }
    }
    /**
     * Gets the line of audio.
     * @param audioFormat The format of the audio.
     * @return The line of audio.
     */
    private SourceDataLine getLine(AudioFormat audioFormat){
        SourceDataLine res = null;
        DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
        try{
            res = (SourceDataLine) AudioSystem.getLine(info);
            res.open(audioFormat);
        }catch(Exception e){
            System.err.println("Could not get audio line!");
            e.printStackTrace();
        }
        return res;
    }
    
    /**
     * Waits a specified number of milliseconds.
     * @param time Time to wait (in milliseconds).
     * @param time
     */
    /*
    private void wait(int time){
        try{
            Thread.sleep(time);
        }catch(Exception e){
            System.err.println("Could not wait!");
            e.printStackTrace();
        }
    }
    
    
    /**
     * Sets a byte array of all zeros to "play" when audio is muted. This produces no sound.
     * @return Byte array of all zeros.
     */
    /*
    private byte[] setMuteData(){
        byte[] x = new byte[byteChunkSize];
        for(int i = 0; i < x.length; i++){
            x[i] = 0;
        }
        return x;
    }
      */  
}